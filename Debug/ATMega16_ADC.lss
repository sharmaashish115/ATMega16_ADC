
ATMega16_ADC.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000f2  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000146  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000146  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000178  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000028  00000000  00000000  000001b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000005e7  00000000  00000000  000001dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000566  00000000  00000000  000007c3  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000222  00000000  00000000  00000d29  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000048  00000000  00000000  00000f4c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000305  00000000  00000000  00000f94  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000049  00000000  00000000  00001299  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000018  00000000  00000000  000012e2  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 65 00 	jmp	0xca	; 0xca <__vector_14>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a0 36       	cpi	r26, 0x60	; 96
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 3e 00 	call	0x7c	; 0x7c <main>
  74:	0c 94 77 00 	jmp	0xee	; 0xee <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <main>:
*/

int main(void)
{
	//Set mode of the Timer1
	TCCR1B &= ~(1<<WGM13);
  7c:	8e b5       	in	r24, 0x2e	; 46
  7e:	8f 7e       	andi	r24, 0xEF	; 239
  80:	8e bd       	out	0x2e, r24	; 46
	TCCR1B |= (1<<WGM12);
  82:	8e b5       	in	r24, 0x2e	; 46
  84:	88 60       	ori	r24, 0x08	; 8
  86:	8e bd       	out	0x2e, r24	; 46
	TCCR1A |= (1<<WGM10) | (1<<WGM11);		//FAST PWM 10 BIT MODE
  88:	8f b5       	in	r24, 0x2f	; 47
  8a:	83 60       	ori	r24, 0x03	; 3
  8c:	8f bd       	out	0x2f, r24	; 47
	
	//Set PWM Mode
	TCCR1A |= (1<<COM1A1);
  8e:	8f b5       	in	r24, 0x2f	; 47
  90:	80 68       	ori	r24, 0x80	; 128
  92:	8f bd       	out	0x2f, r24	; 47
	TCCR1A &= ~(1<<COM1A0);				//PWM in Non Inverting Mode
  94:	8f b5       	in	r24, 0x2f	; 47
  96:	8f 7b       	andi	r24, 0xBF	; 191
  98:	8f bd       	out	0x2f, r24	; 47
	
	//Clock is 8MHz and prescaler is 256. So, 8000000/256 =31250
	TCCR1B |= (1<<CS12);
  9a:	8e b5       	in	r24, 0x2e	; 46
  9c:	84 60       	ori	r24, 0x04	; 4
  9e:	8e bd       	out	0x2e, r24	; 46
	
	//Configure the Output compare pin as O/P
	DDRD |= (1<<DDD5);
  a0:	81 b3       	in	r24, 0x11	; 17
  a2:	80 62       	ori	r24, 0x20	; 32
  a4:	81 bb       	out	0x11, r24	; 17
	
	//ADC Conversion Code 
	
	//Enable the Global Interrupt bit
	sei();
  a6:	78 94       	sei
	
	//Enable ADC Interrupt
	ADCSRA |= (1<<ADIE);
  a8:	86 b1       	in	r24, 0x06	; 6
  aa:	88 60       	ori	r24, 0x08	; 8
  ac:	86 b9       	out	0x06, r24	; 6
	
	//Set reference to NO AVCC and input to ADC0
	//Set data alignment in data register
	ADMUX = 0x00;
  ae:	17 b8       	out	0x07, r1	; 7
	
	//Enable ADC
	ADCSRA |= (1<<ADEN) | (1<<ADATE);
  b0:	86 b1       	in	r24, 0x06	; 6
  b2:	80 6a       	ori	r24, 0xA0	; 160
  b4:	86 b9       	out	0x06, r24	; 6
	
	//Set frequency of ADC Conversion
	ADCSRA |= (1<<ADPS2);
  b6:	86 b1       	in	r24, 0x06	; 6
  b8:	84 60       	ori	r24, 0x04	; 4
  ba:	86 b9       	out	0x06, r24	; 6
	ADCSRA &= (~(1<<ADPS1)) & (~(1<<ADPS0));		//Prescaler 16 | Clock = 16MHz/16 = 1MHz
  bc:	86 b1       	in	r24, 0x06	; 6
  be:	8c 7f       	andi	r24, 0xFC	; 252
  c0:	86 b9       	out	0x06, r24	; 6
	
	//Start the conversion
	ADCSRA |= (1<<ADSC);
  c2:	86 b1       	in	r24, 0x06	; 6
  c4:	80 64       	ori	r24, 0x40	; 64
  c6:	86 b9       	out	0x06, r24	; 6
  c8:	ff cf       	rjmp	.-2      	; 0xc8 <main+0x4c>

000000ca <__vector_14>:
	}
}

//ISR Function
ISR(ADC_vect)
{
  ca:	1f 92       	push	r1
  cc:	0f 92       	push	r0
  ce:	0f b6       	in	r0, 0x3f	; 63
  d0:	0f 92       	push	r0
  d2:	11 24       	eor	r1, r1
  d4:	8f 93       	push	r24
  d6:	9f 93       	push	r25
	OCR1A = ADC;
  d8:	84 b1       	in	r24, 0x04	; 4
  da:	95 b1       	in	r25, 0x05	; 5
  dc:	9b bd       	out	0x2b, r25	; 43
  de:	8a bd       	out	0x2a, r24	; 42
}
  e0:	9f 91       	pop	r25
  e2:	8f 91       	pop	r24
  e4:	0f 90       	pop	r0
  e6:	0f be       	out	0x3f, r0	; 63
  e8:	0f 90       	pop	r0
  ea:	1f 90       	pop	r1
  ec:	18 95       	reti

000000ee <_exit>:
  ee:	f8 94       	cli

000000f0 <__stop_program>:
  f0:	ff cf       	rjmp	.-2      	; 0xf0 <__stop_program>
